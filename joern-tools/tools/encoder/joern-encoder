#!/usr/bin/env python2

from joerntools.shelltool.JoernTool import JoernTool
import pygraphviz as pgv

DESCRIPTION = """Retrieve a graph representation of a function with the given
id. The default output format is graphviz's 'dot'.
"""

CFG_NODE_COLOR = 'lightblue'
CFG_EDGE_COLOR = 'lightblue'
DDG_EDGE_COLOR = 'lightcoral'
CDG_EDGE_COLOR = 'khaki'
SYMBOL_NODE_COLOR = 'lightgray'
USE_EDGE_COLOR = 'lightgray'
DEF_EDGE_COLOR = 'lightgray'

class ProgramGraph(JoernTool):

    def __init__(self):

        JoernTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-a', '--attributes',
                                    nargs = '+', type = str,
                                    help = """Attributes shown in each node.""",
                                    default = None)

        self.argParser.add_argument('-cfg', '--show-control-flow',
                                    action = 'store_true',
                                    help = """Show control flow.""",
                                    default = False)

        self.argParser.add_argument('-dfg', '--show-data-flow',
                                    action = 'store_true',
                                    help = """Show data flow.""",
                                    default = False)

        self.argParser.add_argument('-ddg', '--show-data-dependences',
                                    action = 'store_true',
                                    help = """Show data dependences.""",
                                    default = False)

        self.argParser.add_argument('-cdg', '--show-control-dependences',
                                    action = 'store_true',
                                    help = """Show control dependences.""",
                                    default = False)

        self.argParser.add_argument('-dom', '--show-dominance-edges',
                                    action = 'store_true',
                                    help = """Show dominance edges.""",
                                    default = False)

        self.argParser.add_argument('-all', '--show-all',
                                    action = 'store_true',
                                    help = """Show all edge types""",
                                    default = False)

        self.argParser.add_argument('-func', '--input-function',
                                    action = 'store_true',
                                    help = """input-function id""",
                                    default = False)

        self.argParser.add_argument('-file', '--input-file',
                                    action = 'store_true',
                                    help = """input-file id""",
                                    default = False)

    # @Override
    def processLine(self, line):

        id = int(line)
        if self.args.input_function:
            print self._encoderFunctionId(id)
        elif self.args.input_file:
            print self._encoderFileId(id)

        # self._outputGraph(G, line)

    def _getCFGNodes(self, function_id):

        query = """queryNodeIndex('functionId:%s AND isCFGNode:True')""" % (function_id)
        return self._runGremlinQuery(query)

    def _getSymbolNodes(self, function_id):

        if not self.args.show_data_flow and not self.args.show_all:
            return []

        query = """queryNodeIndex('functionId:%s AND type:Symbol')""" % (function_id)
        return self._runGremlinQuery(query)

    def _getEdges(self, function_id, type):

        query = """queryNodeIndex('functionId:%s AND isCFGNode:True').outE('%s')""" % (function_id, type)
        return self._runGremlinQuery(query)
    
    def _getCFGEdges(self, function_id):

        if not self.args.show_control_flow and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'FLOWS_TO')
    
    def _getUseEdges(self, function_id):

        if not self.args.show_data_flow and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'USE')

    def _getDefEdges(self, function_id):

        if not self.args.show_data_flow and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'DEF')

    def _getDDGEdges(self, function_id):

        if not self.args.show_data_dependences and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'REACHES')

    def _getCDGEdges(self, function_id):

        if not self.args.show_control_dependences and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'CONTROLS')

    def _getDomEdges(self, function_id):

        if not self.args.show_dominance_edges and not self.args.show_all:
            return []

        return self._getEdges(function_id, 'POST_DOM')

    def _encoderFileId(self, file_id):
        G = pgv.AGraph(directed = True, strict = False)
        query = """g.v('%s').out('IS_FILE_OF')""" % (file_id)
        nodes = self._runGremlinQuery(query)
        vector = None
        classCount = 0
        FunctCount = 0
        for node in nodes:
            if node.get_properties()['type'] == 'Function':
                FunctCount += 1
                vec = self._encoderFunctionId(node._id)
                if vector is None:
                    vector = []
                    for i in range(len(vec)):
                        vector.append(vec[i])
                else:
                    for i in range(len(vec)):
                        vector[i] += vec[i]
            if node.get_properties()['type'] == 'Class':
                classCount += 1
        vector += [classCount, FunctCount]
        return vector

    def _encoderFunctionId(self, function_id):
        G = pgv.AGraph(directed = True, strict = False)
        vector = []
        # vector += self._ast_stat(self._getASTGraph(function_id));
        self._addCFGNodes(G, self._getCFGNodes(function_id))
        vector += self._node_stat(self._getCFGNodes(function_id))
        vector += self._edge_stat(self._getCFGEdges(function_id))
        self._addSymbolNodes(G, self._getSymbolNodes(function_id))
        self._addCFGEdges(G, self._getCFGEdges(function_id))
        vector += self._degree_stat(G)
        self._addUseEdges(G, self._getUseEdges(function_id))
        vector += self._degree_stat(G)
        self._addDefEdges(G, self._getDefEdges(function_id))
        vector += self._degree_stat(G)
        self._addDDGEdges(G, self._getDDGEdges(function_id))
        vector += self._degree_stat(G)
        self._addCDGEdges(G, self._getCDGEdges(function_id))
        vector += self._degree_stat(G)
        self._addDomEdges(G, self._getDomEdges(function_id))
        vector += self._degree_stat(G)
        return vector

    def _node_stat(self, nodes):
        for node in nodes:
            properties = node.get_properties()
        return [len(nodes)]

    def _edge_stat(self, edges):
        for edge in edges:
            properties = edge.get_properties()
        return [len(edge)]

    def _degree_stat(self, G):
        return self._degree_stat_impl(G.in_degree()) + self._degree_stat_impl(G.out_degree())

    def _degree_stat_impl(self, degree_arr):
        degree_num = 5
        otherwise = len(degree_arr)
        stat = []
        for num in range(degree_num):
            stat.append(0)
            for i in range(len(degree_arr)):
                if degree_arr[i] == num:
                    stat[-1] += 1
            otherwise -= stat[-1]
        stat.append(otherwise)
        return stat

    def _addCFGNodes(self, G, nodes):

        for node in nodes:
            G.add_node(node._id,
                    label = self._attributesAsString(node),
                    style = 'filled',
                    fontsize = 10,
                    color = CFG_NODE_COLOR)

    def _addSymbolNodes(self, G, nodes):

        for node in nodes:
            G.add_node(node._id,
                    label = node.get_properties()['code'],
                    style = 'filled',
                    fontsize = 10,
                    color = SYMBOL_NODE_COLOR)

    def _addCFGEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = CFG_EDGE_COLOR,
                    label = edge.get_properties()['flowLabel'])

    def _addDefEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = DEF_EDGE_COLOR,
                    label = 'def')

    def _addUseEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = USE_EDGE_COLOR,
                    label = 'use')

    def _addDDGEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = DDG_EDGE_COLOR,
                    label = edge.get_properties()['var'])

    def _addCDGEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = CDG_EDGE_COLOR)

    def _addDomEdges(self, G, edges):

        for edge in edges:
            G.add_edge(edge.start_node._id, edge.end_node._id)

    def _attributesAsString(self, n):
        
        properties = n.get_properties()
        properties['id'] = n._id
        valid_attributes = []
        if self.args.attributes:
            for a in self.args.attributes:
                if a in properties:
                    valid_attributes.append(a)

            if not valid_attributes:
                valid_attributes.append('id')

            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in valid_attributes])
        else:
            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in properties.keys()])

    def _outputGraph(self, G, identifier):

        ENDMARKER = '//###'
        self.output('//' + identifier + '\n')
        self.output(str(G) + '\n')
        self.output(ENDMARKER + '\n')
    
    def _ast_stat(self, G):
        ast_type_arr = [
            'ClassDefStatement',
            'IdentifierDecl',
            'IdentifierDeclType',
            'AdditiveExpression',
            'AndExpression',
            'Argument',
            'ArgumentList',
            'ArrayIndexing',
            'AssignmentExpr',
            'BinaryExpression',
            'BitAndExpression',
            'Callee',
            'CallExpression',
            'CastExpression',
            'CastTarget',
            'ConditionalExpression',
            'EqualityExpression',
            'ExclusiveOrExpression',
            'Expression',
            'Identifier',
            'IncDec',
            'IncDecOp',
            'InclusiveOrExpression',
            'InitializerList',
            'MemberAccess',
            'MultiplicativeExpression',
            'OrExpression',
            'PostfixExpression',
            'PrimaryExpression',
            'PtrMemberAccess',
            'RelationalExpression',
            'ShiftExpression',
            'SizeofExpr',
            'Sizeof',
            'SizeofOperand',
            'UnaryExpression',
            'UnaryOperator',
            'UnaryOp',
            'DummyReturnType',
            'FunctionDef',
            'Parameter',
            'ParameterList',
            'ParameterType',
            'ReturnType',
            'BlockCloser',
            'BlockStarter',
            'BreakStatement',
            'CompoundStatement',
            'Condition',
            'ContinueStatement',
            'DoStatement',
            'ElseStatement',
            'ExpressionHolder',
            'ExpressionHolderStatement',
            'ExpressionStatement',
            'ForInit',
            'ForStatement',
            'GotoStatement',
            'IdentifierDeclStatement',
            'IfStatement',
            'JumpStatement',
            'Label',
            'ReturnStatement',
            'Statement',
            'SwitchStatement',
            'WhileStatement']
        ast_type_index_map = {}
        stat = []
        for i in range(len(ast_type_arr)):
            stat.append(0)
            ast_type_index_map[ast_type_arr[i]] = i

        for node in G.nodes():
            stat[ast_type_index_map[G.get_node(node).attr['type']]] += 1
        return stat

    def _getASTGraph(self, nodeId):
        nodes = self._getASTNodes(nodeId)
        edges = self._getASTEdges(nodeId)
        
        G = self._createASTDotGraph(nodes, edges)
        return G
    
    def _getASTNodes(self, nodeId):
        query = """g.v(%d).functionToAST().astNodes()
        """% (nodeId)
        
        return self._runGremlinQuery(query)
    
    def _getASTEdges(self, nodeId):
        query = """g.v(%d).functionToAST()
        .astNodes().outE('IS_AST_PARENT')
        """% (nodeId)
        
        return self._runGremlinQuery(query)

    def _createASTDotGraph(self, nodes, edges):
        G = pgv.AGraph()
        
        idNodePairs = [(n._id, n) for n in nodes]
        
        for (nodeId, n) in idNodePairs:
            G.add_node(nodeId)
            node = G.get_node(nodeId)
            node.attr['type'] = n.properties['type']

        srcDstPairs = [(e.start_node._id, e.end_node._id) for e in edges]
        
        for (startNode, endNode) in srcDstPairs:
            G.add_edge(startNode, endNode)
            
        return G
    
if __name__ == '__main__':
    tool = ProgramGraph()
    tool.run()
